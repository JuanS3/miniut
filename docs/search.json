[{"fullname": "miniut", "modulename": "miniut", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "miniut.abstract", "modulename": "miniut.abstract", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "miniut.abstract.database", "modulename": "miniut.abstract.database", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "miniut.abstract.database.DBAbs", "modulename": "miniut.abstract.database", "qualname": "DBAbs", "type": "class", "doc": "<p></p>\n"}, {"fullname": "miniut.abstract.database.DBAbs.__init__", "modulename": "miniut.abstract.database", "qualname": "DBAbs.__init__", "type": "function", "doc": "<p>Call self as a function.</p>\n", "parameters": ["cls", "args", "kwargs"], "funcdef": "def"}, {"fullname": "miniut.abstract.database.DBAbs.session", "modulename": "miniut.abstract.database", "qualname": "DBAbs.session", "type": "function", "doc": "<p></p>\n", "parameters": ["func"], "funcdef": "def"}, {"fullname": "miniut.abstract.database.DBAbs.open_cxnx", "modulename": "miniut.abstract.database", "qualname": "DBAbs.open_cxnx", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "miniut.abstract.database.DBAbs.close_cxnx", "modulename": "miniut.abstract.database", "qualname": "DBAbs.close_cxnx", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "miniut.config", "modulename": "miniut.config", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "miniut.config.lang", "modulename": "miniut.config", "qualname": "lang", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "miniut.config.define_lang", "modulename": "miniut.config", "qualname": "define_lang", "type": "function", "doc": "<p></p>\n", "parameters": ["language"], "funcdef": "def"}, {"fullname": "miniut.config.all_langs", "modulename": "miniut.config", "qualname": "all_langs", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "miniut.console", "modulename": "miniut.console", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "miniut.console.block", "modulename": "miniut.console", "qualname": "block", "type": "function", "doc": "<p></p>\n", "parameters": ["message_block", "color"], "funcdef": "def"}, {"fullname": "miniut.console.init", "modulename": "miniut.console", "qualname": "init", "type": "function", "doc": "<p>Initialize the console, and resert the indentation level</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>clear : bool, optional\n    True to clear the screen and False is not, by default True</p>\n", "parameters": ["clear", "indentation_type", "indentation_size"], "funcdef": "def"}, {"fullname": "miniut.console.clear_screen", "modulename": "miniut.console", "qualname": "clear_screen", "type": "function", "doc": "<p>Clear the console screen</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "miniut.console.add_lvl", "modulename": "miniut.console", "qualname": "add_lvl", "type": "function", "doc": "<p>Add one level (indentation)</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "miniut.console.del_lvl", "modulename": "miniut.console", "qualname": "del_lvl", "type": "function", "doc": "<p>Substract one level (indentation)</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "miniut.console.println", "modulename": "miniut.console", "qualname": "println", "type": "function", "doc": "<p>Print the message to the console, the <code>endl</code> is the same as <code>end</code> in print function\nand is necessary print the message with the current indentation level and the color\nindicate.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>message : tuple\n    Message to print to console</p>\n\n<p>endl : str, optional\n    The end of line, by default <code>\\n</code></p>\n\n<p>withlvl : bool, optional\n    True if the message should be printed with the current indentation\n    False is not necessary, by default <code>True</code></p>\n\n<p>color : str, optional\n    The color of the message, the color must be one of the <code>COLORS_LIST</code>\n    ['RED', 'GREEN', ...], <code>console.COLORS_LIST</code> for all colors available;\n    by default has no color</p>\n", "parameters": ["message", "endl", "withlvl", "color"], "funcdef": "def"}, {"fullname": "miniut.console.start_block", "modulename": "miniut.console", "qualname": "start_block", "type": "function", "doc": "<p>Start a block of messages</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>message : tuple\n    The title of the block</p>\n\n<p>color : str, optional\n    The color of the title block, by default BLUE</p>\n", "parameters": ["message", "color"], "funcdef": "def"}, {"fullname": "miniut.console.end_block", "modulename": "miniut.console", "qualname": "end_block", "type": "function", "doc": "<p>End a block of messages</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>message : tuple\n    The title of the block</p>\n\n<p>color : str, optional\n    The color of the title block, by default BLUE</p>\n", "parameters": ["message", "color"], "funcdef": "def"}, {"fullname": "miniut.console.warning", "modulename": "miniut.console", "qualname": "warning", "type": "function", "doc": "<p>Warning message starts with 'warning: {message}'</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>message : tuple\n    The message to display in the log</p>\n", "parameters": ["message"], "funcdef": "def"}, {"fullname": "miniut.console.error", "modulename": "miniut.console", "qualname": "error", "type": "function", "doc": "<p>Error message is displayed like <code>error: &gt;&gt;&gt; {message} &lt;&lt;&lt;</code></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>message : tuple\n    The message to display in the log</p>\n", "parameters": ["message"], "funcdef": "def"}, {"fullname": "miniut.console.new_line", "modulename": "miniut.console", "qualname": "new_line", "type": "function", "doc": "<p>Display a blank line in the console</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "miniut.console.line", "modulename": "miniut.console", "qualname": "line", "type": "function", "doc": "<p>Display a line in the console like this <code>-- -- -- -- -- -- --</code>\nwhit the indicated size</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>size : int, optional\n    The size of the line to display, by display 30</p>\n", "parameters": ["size"], "funcdef": "def"}, {"fullname": "miniut.console.print_matrix", "modulename": "miniut.console", "qualname": "print_matrix", "type": "function", "doc": "<p>Print a matrix in a pretty formatted</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">print_matrix</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>    <span class=\"mi\">0</span>  <span class=\"mi\">1</span>  <span class=\"mi\">2</span>\n<span class=\"gp\">... </span>    <span class=\"o\">-------</span>\n<span class=\"gp\">... </span><span class=\"mi\">0</span> <span class=\"o\">|</span> <span class=\"mi\">1</span>  <span class=\"mi\">2</span>  <span class=\"mi\">3</span> <span class=\"o\">|</span>\n<span class=\"gp\">... </span><span class=\"mi\">1</span> <span class=\"o\">|</span> <span class=\"mi\">4</span>  <span class=\"mi\">5</span>  <span class=\"mi\">6</span> <span class=\"o\">|</span>\n<span class=\"gp\">... </span>    <span class=\"o\">-------</span>\n</code></pre></div>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">print_matrix</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>             <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;one&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;two&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;three&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>             <span class=\"n\">indexes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;row1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;row2&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>             <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">&#39;semibox&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>             <span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>         <span class=\"n\">one</span>     <span class=\"n\">two</span>    <span class=\"n\">three</span>\n<span class=\"gp\">... </span>       <span class=\"o\">-----------------------</span>\n<span class=\"gp\">... </span><span class=\"n\">row1</span> <span class=\"o\">|</span>    <span class=\"mi\">1</span>       <span class=\"mi\">2</span>       <span class=\"mi\">3</span>\n<span class=\"gp\">... </span><span class=\"n\">row2</span> <span class=\"o\">|</span>    <span class=\"mi\">4</span>       <span class=\"mi\">5</span>       <span class=\"mi\">6</span>\n</code></pre></div>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>matrix : Iterable object\n    An iterable object to print</p>\n\n<p>header : List[str] | str, optional\n    A list of strings if is a presonalized column name\n    - <code>all</code> to show the index of the column,\n    - <code>None</code> do not show any index, by default <code>all</code></p>\n\n<p>indexes : List[str] | str, optional\n    A list of strings if is a presonalized index name\n    - <code>all</code> to show the index of the row,\n    - <code>None</code> do not show any index, by default <code>all</code></p>\n\n<p>style : str, optional\n    The style to print the matrix, by default <code>box</code>\n    - <code>box</code> Borders around the matrix\n    - <code>semibox</code> Borders at the top and left of the matrix\n    - <code>None</code> Without borders, only show the values\n    - <code>numpy</code> or <code>np</code> Has been printed like a NumPy matrix</p>\n\n<p>nan_format : str, optional\n    The formatted string to print a NaN/None value, by default ''</p>\n\n<p>color : str, optional\n    The color of the matrix items, the color must be one of the <code>COLORS_LIST</code>\n    ['RED', 'GREEN', ...], <code>console.COLORS_LIST</code> for all colors available;\n    by default has no color</p>\n\n<p>color_index : str, optional\n    The color of the index, the color must be one of the <code>COLORS_LIST</code>\n    ['RED', 'GREEN', ...], <code>console.COLORS_LIST</code> for all colors available;\n    by default has no color</p>\n\n<p>color_style : str, optional\n    The color style to print the matrix, for example the grid lines,\n    the color must be one of the <code>COLORS_LIST</code>\n    ['RED', 'GREEN', ...], <code>console.COLORS_LIST</code> for all colors available;\n    by default has no color</p>\n\n<p>withlvl : bool, optional\n    True if the matrix should be printed with the current indentation False in otherwise</p>\n", "parameters": ["matrix", "header", "indexes", "style", "nan_format", "color", "color_index", "color_style", "withlvl"], "funcdef": "def"}, {"fullname": "miniut.decorators", "modulename": "miniut.decorators", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "miniut.decorators.singleton", "modulename": "miniut.decorators", "qualname": "singleton", "type": "function", "doc": "<p>Make a class a Singleton class (only one instance)</p>\n", "parameters": ["cls"], "funcdef": "def"}, {"fullname": "miniut.decorators.ttime", "modulename": "miniut.decorators", "qualname": "ttime", "type": "function", "doc": "<p>Calculate execution time for a function</p>\n", "parameters": ["func"], "funcdef": "def"}, {"fullname": "miniut.exceptions", "modulename": "miniut.exceptions", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "miniut.exceptions.log", "modulename": "miniut.exceptions.log", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "miniut.exceptions.log.LoggingGeneralException", "modulename": "miniut.exceptions.log", "qualname": "LoggingGeneralException", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n"}, {"fullname": "miniut.exceptions.log.RestoreLog", "modulename": "miniut.exceptions.log", "qualname": "RestoreLog", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n"}, {"fullname": "miniut.exceptions.log.RestoreLog.__init__", "modulename": "miniut.exceptions.log", "qualname": "RestoreLog.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "message", "error"], "funcdef": "def"}, {"fullname": "miniut.log", "modulename": "miniut.log", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "miniut.log.FOLDER_LOGS_DEFAULT", "modulename": "miniut.log", "qualname": "FOLDER_LOGS_DEFAULT", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "miniut.log.block", "modulename": "miniut.log", "qualname": "block", "type": "function", "doc": "<p></p>\n", "parameters": ["message_block"], "funcdef": "def"}, {"fullname": "miniut.log.init", "modulename": "miniut.log", "qualname": "init", "type": "function", "doc": "<p>Initialize the logging module</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>log_name : str\n    Name of logging file\nfolder_log : str, optional\n    Folder where the logging file should be stored, by default 'Logs'\ntime : bool, optional\n    True in case the logging file name has the time with format '%Y%m%d-%H%M%S'\n    False in case the time in the name is not necessary, by default True</p>\n", "parameters": ["log_name", "folder_log", "time"], "funcdef": "def"}, {"fullname": "miniut.log.get_folder_log", "modulename": "miniut.log", "qualname": "get_folder_log", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "miniut.log.get_log_name", "modulename": "miniut.log", "qualname": "get_log_name", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "miniut.log.start_block", "modulename": "miniut.log", "qualname": "start_block", "type": "function", "doc": "<p>Start a block of messages</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>message : str\n    The title of the block</p>\n", "parameters": ["message"], "funcdef": "def"}, {"fullname": "miniut.log.end_block", "modulename": "miniut.log", "qualname": "end_block", "type": "function", "doc": "<p>End a block of messages</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>message : str\n    The title of the block</p>\n", "parameters": ["message"], "funcdef": "def"}, {"fullname": "miniut.log.info", "modulename": "miniut.log", "qualname": "info", "type": "function", "doc": "<p>Information message into the log</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>message : str\n    The message to display in the log</p>\n", "parameters": ["message"], "funcdef": "def"}, {"fullname": "miniut.log.warning", "modulename": "miniut.log", "qualname": "warning", "type": "function", "doc": "<p>Warning message into the log</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>message : str\n    The message to display in the log</p>\n", "parameters": ["message"], "funcdef": "def"}, {"fullname": "miniut.log.critical", "modulename": "miniut.log", "qualname": "critical", "type": "function", "doc": "<p>Critial message to display in the log</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>message : str\n    The message to display in the log</p>\n", "parameters": ["message"], "funcdef": "def"}, {"fullname": "miniut.log.error", "modulename": "miniut.log", "qualname": "error", "type": "function", "doc": "<p>Error message to display in the log</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>message : str\n    The message to display in the log</p>\n", "parameters": ["message"], "funcdef": "def"}, {"fullname": "miniut.log.close", "modulename": "miniut.log", "qualname": "close", "type": "function", "doc": "<p>If the log file had any problem to write then try to restore it.</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "miniut.metaclasses", "modulename": "miniut.metaclasses", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "miniut.metaclasses.SingletonMeta", "modulename": "miniut.metaclasses", "qualname": "SingletonMeta", "type": "class", "doc": "<p>type(object_or_name, bases, dict)\ntype(object) -> the object's type\ntype(name, bases, dict) -> a new type</p>\n"}, {"fullname": "miniut.metaclasses.SingletonMeta.clear", "modulename": "miniut.metaclasses", "qualname": "SingletonMeta.clear", "type": "function", "doc": "<p></p>\n", "parameters": ["cls"], "funcdef": "def"}, {"fullname": "miniut.report", "modulename": "miniut.report", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "miniut.report.add_id", "modulename": "miniut.report", "qualname": "add_id", "type": "function", "doc": "<p></p>\n", "parameters": ["id"], "funcdef": "def"}, {"fullname": "miniut.report.add_message_by_id", "modulename": "miniut.report", "qualname": "add_message_by_id", "type": "function", "doc": "<p></p>\n", "parameters": ["id", "title", "message"], "funcdef": "def"}, {"fullname": "miniut.report.ge_val_per_id", "modulename": "miniut.report", "qualname": "ge_val_per_id", "type": "function", "doc": "<p></p>\n", "parameters": ["id"], "funcdef": "def"}, {"fullname": "miniut.report.num_total_values", "modulename": "miniut.report", "qualname": "num_total_values", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "miniut.report.num_errors_by_id", "modulename": "miniut.report", "qualname": "num_errors_by_id", "type": "function", "doc": "<p></p>\n", "parameters": ["id"], "funcdef": "def"}, {"fullname": "miniut.report.print_general_report", "modulename": "miniut.report", "qualname": "print_general_report", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "miniut.report.print_detail_report", "modulename": "miniut.report", "qualname": "print_detail_report", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "miniut.report.general_report_string", "modulename": "miniut.report", "qualname": "general_report_string", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "miniut.report.detail_report_string", "modulename": "miniut.report", "qualname": "detail_report_string", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}]